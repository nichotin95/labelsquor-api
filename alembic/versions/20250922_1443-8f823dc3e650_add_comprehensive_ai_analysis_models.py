"""add_comprehensive_ai_analysis_models

Revision ID: 8f823dc3e650
Revises: 2a17e29d841f
Create Date: 2025-09-22 14:43:28.124117

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision = '8f823dc3e650'
down_revision = '2a17e29d841f'
branch_labels = None
depends_on = None


def upgrade() -> None:
    """Apply migration"""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('product_analysis',
    sa.Column('analysis_id', sa.Uuid(), nullable=False),
    sa.Column('product_version_id', sa.Uuid(), nullable=False),
    sa.Column('model_used', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('analysis_mode', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('confidence', sa.Float(), nullable=False),
    sa.Column('analyzed_at', sa.DateTime(), nullable=False),
    sa.Column('input_tokens', sa.Integer(), nullable=False),
    sa.Column('output_tokens', sa.Integer(), nullable=False),
    sa.Column('image_tokens', sa.Integer(), nullable=False),
    sa.Column('total_tokens', sa.Integer(), nullable=False),
    sa.Column('analysis_cost', sa.Float(), nullable=False),
    sa.Column('ai_product_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('ai_brand_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('ai_category', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('best_image_index', sa.Integer(), nullable=True),
    sa.Column('best_image_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('best_image_reason', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('hosted_image_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('overall_rating', sa.Float(), nullable=True),
    sa.Column('recommendation', sa.Text(), nullable=True),
    sa.Column('raw_response', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['product_version_id'], ['product_version.product_version_id'], ),
    sa.PrimaryKeyConstraint('analysis_id')
    )
    op.create_table('product_claim',
    sa.Column('claim_id', sa.Uuid(), nullable=False),
    sa.Column('analysis_id', sa.Uuid(), nullable=False),
    sa.Column('claim_text', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('claim_type', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('verified', sa.Boolean(), nullable=True),
    sa.Column('verification_notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['analysis_id'], ['product_analysis.analysis_id'], ),
    sa.PrimaryKeyConstraint('claim_id')
    )
    op.create_table('product_ingredient',
    sa.Column('ingredient_id', sa.Uuid(), nullable=False),
    sa.Column('analysis_id', sa.Uuid(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('order_index', sa.Integer(), nullable=False),
    sa.Column('percentage', sa.Float(), nullable=True),
    sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['analysis_id'], ['product_analysis.analysis_id'], ),
    sa.PrimaryKeyConstraint('ingredient_id')
    )
    op.create_table('product_nutrition',
    sa.Column('nutrition_id', sa.Uuid(), nullable=False),
    sa.Column('analysis_id', sa.Uuid(), nullable=False),
    sa.Column('energy_kcal', sa.Float(), nullable=True),
    sa.Column('protein_g', sa.Float(), nullable=True),
    sa.Column('carbs_g', sa.Float(), nullable=True),
    sa.Column('sugar_g', sa.Float(), nullable=True),
    sa.Column('fat_g', sa.Float(), nullable=True),
    sa.Column('saturated_fat_g', sa.Float(), nullable=True),
    sa.Column('sodium_mg', sa.Float(), nullable=True),
    sa.Column('fiber_g', sa.Float(), nullable=True),
    sa.Column('calcium_mg', sa.Float(), nullable=True),
    sa.Column('iron_mg', sa.Float(), nullable=True),
    sa.Column('serving_size', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('additional_nutrition', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['analysis_id'], ['product_analysis.analysis_id'], ),
    sa.PrimaryKeyConstraint('nutrition_id')
    )
    op.create_table('product_warning',
    sa.Column('warning_id', sa.Uuid(), nullable=False),
    sa.Column('analysis_id', sa.Uuid(), nullable=False),
    sa.Column('warning_text', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('warning_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('severity', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['analysis_id'], ['product_analysis.analysis_id'], ),
    sa.PrimaryKeyConstraint('warning_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Revert migration"""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('product_warning')
    op.drop_table('product_nutrition')
    op.drop_table('product_ingredient')
    op.drop_table('product_claim')
    op.drop_table('product_analysis')
    # ### end Alembic commands ###
