[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "labelsquor-api"
version = "1.0.0"
description = "Product analysis and SQUOR scoring API for Indian food products"
readme = "README.md"
authors = [
    {name = "LabelSquor Team", email = "info@labelsquor.com"}
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.116.1",
    "uvicorn[standard]>=0.35.0",
    "pydantic>=2.11.9",
    "pydantic-settings>=2.10.1",
    "sqlmodel>=0.0.24",
    "asyncpg>=0.30.0",
    "alembic>=1.13.1",
    "python-jose[cryptography]>=3.5.0",
    "passlib[bcrypt]>=1.7.4",
    "httpx>=0.28.1",
    "redis>=5.0.1",
    "loguru>=0.7.3",
    "python-dotenv>=1.1.1",
]

[project.optional-dependencies]
crawler = [
    "scrapy>=2.13.3",
    "scrapy-playwright>=0.0.44",
    "playwright>=1.41.1",
    "beautifulsoup4>=4.13.5",
]
ml = [
    "google-generativeai>=0.8.5",
    "sentence-transformers>=5.1.0",
    "torch>=2.8.0",
    "transformers>=4.56.1",
    "scikit-learn>=1.7.2",
]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "flake8>=7.0.0",
    "mypy>=1.13.0",
    "bandit[toml]>=1.7.7",
    "safety>=3.0.0",
    "ipython>=8.21.0",
]
all = ["labelsquor-api[crawler,ml,dev]"]

[project.urls]
Homepage = "https://github.com/labelsquor/labelsquor-api"
Documentation = "https://docs.labelsquor.com"
Repository = "https://github.com/labelsquor/labelsquor-api"
Issues = "https://github.com/labelsquor/labelsquor-api/issues"

[project.scripts]
labelsquor-api = "app.main:main"
labelsquor-migrate = "scripts.migrate:main"

[tool.setuptools]
packages = ["app"]
include-package-data = true

[tool.setuptools.package-data]
app = ["*.yaml", "*.json"]

[tool.black]
line-length = 120
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
exclude = [
    "migrations/",
    "tests/",
    "venv/",
]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false

[tool.bandit]
targets = ["app"]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]

[tool.pylint.messages_control]
disable = [
    "C0114",  # missing-module-docstring
    "C0116",  # missing-function-docstring
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "W0613",  # unused-argument
]

[tool.pylint.format]
max-line-length = 120

[tool.ruff]
line-length = 120
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "S",   # flake8-bandit
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "C4",  # flake8-comprehensions
    "T10", # flake8-debugger
    "EXE", # flake8-executable
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
    "DTZ", # flake8-datetimez
    "ERA", # eradicate
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by black)
    "S101",  # use of assert (needed for tests)
    "S105",  # possible hardcoded password
    "S106",  # possible hardcoded password
]
